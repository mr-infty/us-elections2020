import math, sys

def empirical_dist(dps):
    N = len(dps)
    def S(x):
        return len([dp for dp in dps if dp <= x])*1.0/N
    return S

def kolmogorov_dmax(h0_dist, dps):
    dps = sorted(dps)
    S = empirical_dist(dps)
    N = len(dps)
    assert(N >= 1)
    if N == 1:
        dmax = max([max([abs(S(x) - h0_dist(x)) for x in dps]),
                    h0_dist(dps[0]),
                    abs(S(dps[0]) - 1)])
    else:
        dmax = max([max([abs(S(x) - h0_dist(x)) for x in dps]),
                    h0_dist(dps[0]),
                    max([abs(S(dps[i]) - h0_dist(dps[i+1])) for i in range(len(dps)-1)])])
    return dmax

def dcrit(N,alpha=0.05):
    CRIT_ALPH_01 = {
            1: 0.950,
            2: 0.776,
            3: 0.636,
            4: 0.565,
            5: 0.510,
            6: 0.468,
            7: 0.436,
            8: 0.410,
            9: 0.387,
            10: 0.369,
            11: 0.352,
            12: 0.338,
            13: 0.325,
            14: 0.314,
            15: 0.304,
            16: 0.295,
            17: 0.286,
            18: 0.279,
            19: 0.271,
            20: 0.265,
            21: 0.259,
            22: 0.253,
            23: 0.247,
            24: 0.242,
            25: 0.238,
            26: 0.233,
            27: 0.229,
            28: 0.225,
            29: 0.221,
            30: 0.218,
            31: 0.214,
            32: 0.211,
            33: 0.208,
            34: 0.205,
            35: 0.202
            }
    CRIT_ALPH_005 = {
            1: 0.975,
            2: 0.842,
            3: 0.708,
            4: 0.624,
            5: 0.563,
            6: 0.520,
            7: 0.483,
            8: 0.454,
            9: 0.430,
            10: 0.409,
            11: 0.391,
            12: 0.375,
            13: 0.361,
            14: 0.349,
            15: 0.338,
            16: 0.327,
            17: 0.318,
            18: 0.309,
            19: 0.301,
            20: 0.294,
            21: 0.287,
            22: 0.281,
            23: 0.275,
            24: 0.269,
            25: 0.264,
            26: 0.259,
            27: 0.254,
            28: 0.250,
            29: 0.246,
            30: 0.242,
            31: 0.238,
            32: 0.234,
            33: 0.231,
            34: 0.227,
            35: 0.224
            }
    CRIT_ALPH_001 = {
            1: 0.995,
            2: 0.929,
            3: 0.829,
            4: 0.734,
            5: 0.669,
            6: 0.617,
            7: 0.576,
            8: 0.542,
            9: 0.513,
            10: 0.489,
            11: 0.468,
            12: 0.450,
            13: 0.432,
            14: 0.418,
            15: 0.404,
            16: 0.392,
            17: 0.381,
            18: 0.371,
            19: 0.361,
            20: 0.352,
            21: 0.344,
            22: 0.337,
            23: 0.330,
            24: 0.323,
            25: 0.317,
            26: 0.311,
            27: 0.305,
            28: 0.300,
            29: 0.295,
            30: 0.290,
            31: 0.285,
            32: 0.281,
            33: 0.277,
            34: 0.273,
            35: 0.269
            }
    if N <= 35:
        if alpha == 0.1:
            return CRIT_ALPH_01[N]
        elif alpha == 0.05:
            return CRIT_ALPH_005[N]
        elif alpha == 0.01:
            return CRITA_ALPH_001[N]
        else:
            raise NotImplementedError("Given value of alpha not supported for values of N <= 35.")
    else:
        return math.sqrt(-0.5*math.log(alpha/2)/N) # alpha = 0.01

#biden_dps = [0.8721562727482928, 0.26119147205036963, 0.6787004349983041, 0.29710365014925655, 0.41946007278607045, 0.5364321758220134, 0.5969268143429707, 0.1794943410054497, 0.803183888535342, 0.20924684875337363, 0.4851533499036522, 0.4949889736831681, 0.7581546219673898, 0.10105935490811557, 0.8273692730538253, 0.7032913781186614, 0.8486201174341339, 0.46996920949995946, 0.2538224387080734, 0.4340896384178907, 0.2304489213782741, 0.6487502126980194, 0.7121444142148858, 0.08735543005405155, 0.6305295714268242, 0.01300585001573662, 0.6896639650157703, 0.06020662106735042, 0.14301480025409496, 0.3191060593097763, 0.20194306340165014, 0.5888317255942073, 0.67089495352021, 0.4131320504348719, 0.1051012445496422, 0.5692568333286099, 0.2575249850238448, 0.9903388547876015, 0.07452388793495146, 0.5494937132150133, 0.44090908206521817, 0.1306553490220308, 0.6961815871685237, 0.850278552518037, 0.9389448054529561, 0.7384634394619525, 0.16345955176999016, 0.7693773260761385, 0.896272621303674, 0.6459132750338443, 0.8066208304825055, 0.11922288692358318, 0.585347911094591, 0.6039018317316716, 0.7491950422196725, 0.3430144971507678, 0.044461360810664985, 0.5189874574409554, 0.8863779067585722, 0.6664243725187595, 0.11700599663596645, 0.7645497190644672, 0.5741933740763265, 0.6835873175727669, 0.3527611917238307, 0.6059511575648728, 0.9885589568786157]

def uniform_dist(x):
    return x

def satisfies_benford(dps):
    N = len(dps)
    if N == 0:
        return True
    else:
        return kolmogorov_dmax(uniform_dist, map(lambda x: math.log10(float(x)) % 1.0, dps)) <= dcrit(N)

#N = len(biden_dps)
#print "dmax: %f" % kolmogorov_dmax(uniform_dist, biden_dps)
#print "dcrit: %f" % dcrit(N)
#print "Benford's law satisifed: %s" % satisfies_benford(biden_dps)
#biden_dist = empirical_dist(biden_dps)
#for i in range(101):
#    x = i/100.0
#    print "S(%f) = %f" % (x, biden_dist(x))

def main():
    if len(sys.argv) == 2:
        f = open(sys.argv[1], 'r')
    elif len(sys.argv) == 1:
        f = sys.stdin
    else:
        sys.exit(2)
   
    dps = [math.log10(float(l)) % 1.0 for l in f if len(l.strip()) > 0 and int(l) > 0]
    f.close()

    dmax = kolmogorov_dmax(uniform_dist, dps)
    _dcrit = dcrit(len(dps))
    print "N = %d" % len(dps)
    print "dmax = %f" % dmax
    print "dcrit = %f" % _dcrit
    #exit(1 - int(satisfies_benford(dps)))
    print "Benford's law %s" % ("PRESERVED" if (dmax <= _dcrit) else "VIOLATED")

if __name__ == "__main__":
    main()
